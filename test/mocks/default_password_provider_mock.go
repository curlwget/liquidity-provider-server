// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/rsksmart/liquidity-provider-server/internal/entities"
	entitiesliquidity_provider "github.com/rsksmart/liquidity-provider-server/internal/entities/liquidity_provider"

	mock "github.com/stretchr/testify/mock"
)

// DefaultPasswordProviderMock is an autogenerated mock type for the DefaultPasswordProvider type
type DefaultPasswordProviderMock struct {
	mock.Mock
}

type DefaultPasswordProviderMock_Expecter struct {
	mock *mock.Mock
}

func (_m *DefaultPasswordProviderMock) EXPECT() *DefaultPasswordProviderMock_Expecter {
	return &DefaultPasswordProviderMock_Expecter{mock: &_m.Mock}
}

// DefaultPassword provides a mock function with given fields:
func (_m *DefaultPasswordProviderMock) DefaultPassword() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DefaultPassword")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DefaultPasswordProviderMock_DefaultPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DefaultPassword'
type DefaultPasswordProviderMock_DefaultPassword_Call struct {
	*mock.Call
}

// DefaultPassword is a helper method to define mock.On call
func (_e *DefaultPasswordProviderMock_Expecter) DefaultPassword() *DefaultPasswordProviderMock_DefaultPassword_Call {
	return &DefaultPasswordProviderMock_DefaultPassword_Call{Call: _e.mock.On("DefaultPassword")}
}

func (_c *DefaultPasswordProviderMock_DefaultPassword_Call) Run(run func()) *DefaultPasswordProviderMock_DefaultPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DefaultPasswordProviderMock_DefaultPassword_Call) Return(_a0 string) *DefaultPasswordProviderMock_DefaultPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DefaultPasswordProviderMock_DefaultPassword_Call) RunAndReturn(run func() string) *DefaultPasswordProviderMock_DefaultPassword_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultPasswordChannel provides a mock function with given fields:
func (_m *DefaultPasswordProviderMock) GetDefaultPasswordChannel() <-chan entities.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultPasswordChannel")
	}

	var r0 <-chan entities.Event
	if rf, ok := ret.Get(0).(func() <-chan entities.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan entities.Event)
		}
	}

	return r0
}

// DefaultPasswordProviderMock_GetDefaultPasswordChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultPasswordChannel'
type DefaultPasswordProviderMock_GetDefaultPasswordChannel_Call struct {
	*mock.Call
}

// GetDefaultPasswordChannel is a helper method to define mock.On call
func (_e *DefaultPasswordProviderMock_Expecter) GetDefaultPasswordChannel() *DefaultPasswordProviderMock_GetDefaultPasswordChannel_Call {
	return &DefaultPasswordProviderMock_GetDefaultPasswordChannel_Call{Call: _e.mock.On("GetDefaultPasswordChannel")}
}

func (_c *DefaultPasswordProviderMock_GetDefaultPasswordChannel_Call) Run(run func()) *DefaultPasswordProviderMock_GetDefaultPasswordChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DefaultPasswordProviderMock_GetDefaultPasswordChannel_Call) Return(_a0 <-chan entities.Event) *DefaultPasswordProviderMock_GetDefaultPasswordChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DefaultPasswordProviderMock_GetDefaultPasswordChannel_Call) RunAndReturn(run func() <-chan entities.Event) *DefaultPasswordProviderMock_GetDefaultPasswordChannel_Call {
	_c.Call.Return(run)
	return _c
}

// LiquidityProviderRepository provides a mock function with given fields:
func (_m *DefaultPasswordProviderMock) LiquidityProviderRepository() entitiesliquidity_provider.LiquidityProviderRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LiquidityProviderRepository")
	}

	var r0 entitiesliquidity_provider.LiquidityProviderRepository
	if rf, ok := ret.Get(0).(func() entitiesliquidity_provider.LiquidityProviderRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entitiesliquidity_provider.LiquidityProviderRepository)
		}
	}

	return r0
}

// DefaultPasswordProviderMock_LiquidityProviderRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LiquidityProviderRepository'
type DefaultPasswordProviderMock_LiquidityProviderRepository_Call struct {
	*mock.Call
}

// LiquidityProviderRepository is a helper method to define mock.On call
func (_e *DefaultPasswordProviderMock_Expecter) LiquidityProviderRepository() *DefaultPasswordProviderMock_LiquidityProviderRepository_Call {
	return &DefaultPasswordProviderMock_LiquidityProviderRepository_Call{Call: _e.mock.On("LiquidityProviderRepository")}
}

func (_c *DefaultPasswordProviderMock_LiquidityProviderRepository_Call) Run(run func()) *DefaultPasswordProviderMock_LiquidityProviderRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DefaultPasswordProviderMock_LiquidityProviderRepository_Call) Return(_a0 entitiesliquidity_provider.LiquidityProviderRepository) *DefaultPasswordProviderMock_LiquidityProviderRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DefaultPasswordProviderMock_LiquidityProviderRepository_Call) RunAndReturn(run func() entitiesliquidity_provider.LiquidityProviderRepository) *DefaultPasswordProviderMock_LiquidityProviderRepository_Call {
	_c.Call.Return(run)
	return _c
}

// SetDefaultPassword provides a mock function with given fields: password
func (_m *DefaultPasswordProviderMock) SetDefaultPassword(password string) {
	_m.Called(password)
}

// DefaultPasswordProviderMock_SetDefaultPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDefaultPassword'
type DefaultPasswordProviderMock_SetDefaultPassword_Call struct {
	*mock.Call
}

// SetDefaultPassword is a helper method to define mock.On call
//   - password string
func (_e *DefaultPasswordProviderMock_Expecter) SetDefaultPassword(password interface{}) *DefaultPasswordProviderMock_SetDefaultPassword_Call {
	return &DefaultPasswordProviderMock_SetDefaultPassword_Call{Call: _e.mock.On("SetDefaultPassword", password)}
}

func (_c *DefaultPasswordProviderMock_SetDefaultPassword_Call) Run(run func(password string)) *DefaultPasswordProviderMock_SetDefaultPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DefaultPasswordProviderMock_SetDefaultPassword_Call) Return() *DefaultPasswordProviderMock_SetDefaultPassword_Call {
	_c.Call.Return()
	return _c
}

func (_c *DefaultPasswordProviderMock_SetDefaultPassword_Call) RunAndReturn(run func(string)) *DefaultPasswordProviderMock_SetDefaultPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewDefaultPasswordProviderMock creates a new instance of DefaultPasswordProviderMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDefaultPasswordProviderMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *DefaultPasswordProviderMock {
	mock := &DefaultPasswordProviderMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
